(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{496:function(t,s,a){"use strict";a.r(s);var v=a(2),r=Object(v.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("初识TS及使用Ts相关工具包")])]),t._v(" "),s("h2",{attrs:{id:"typescript介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript介绍"}},[t._v("#")]),t._v(" TypeScript介绍")]),t._v(" "),s("ul",[s("li",[t._v("TypeScript 简称：TS，是 JavaScript 的超集，简单来说就是：JS 有的 TS 都有")]),t._v(" "),s("li",[t._v("TypeScript = Type + JavaScript（在 JS 基础之上，为 JS 添加了类型支持）")]),t._v(" "),s("li",[t._v("TypeScript 是微软开发的开源编程语言，可以在任何运行 JavaScript 的地方运行")])]),t._v(" "),s("h2",{attrs:{id:"为什么要有typescript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有typescript"}},[t._v("#")]),t._v(" 为什么要有TypeScript")]),t._v(" "),s("h3",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),s("p",[t._v("JS 的类型系统存在“先天缺陷”，JS 代码中绝大部分错误都是类型错误（Uncaught TypeError）这些经常出现的错误，导致了在使用 JS 进行项目开发时，增加了找 Bug、改 Bug 的时间，严重影响开发效率")]),t._v(" "),s("h3",{attrs:{id:"原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[t._v("#")]),t._v(" 原因")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("从编程语言的动静来区分，TypeScript 属于静态类型的编程语言，JavaScript 属于动态类型的编程语言")]),t._v(" "),s("ul",[s("li",[t._v("静态类型：编译期做类型检查")]),t._v(" "),s("li",[t._v("动态类型：执行期做类型检查")])])]),t._v(" "),s("li",[s("p",[t._v("代码编译和代码执行的顺序：1 编译 2 执行")])]),t._v(" "),s("li",[s("p",[t._v("对于 JS 来说：需要等到代码真正去执行的时候才能发现错误（晚）")])]),t._v(" "),s("li",[s("p",[t._v("对于 TS 来说：在代码编译的时候（代码执行前）就可以发现错误（早）并且，配合 VSCode 等开发工具，TS 可以提前到在编写代码的同时就发现代码中的错误，减少找 Bug、改 Bug 时间")])])]),t._v(" "),s("h3",{attrs:{id:"对比-js-和-ts-发现错误的时机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对比-js-和-ts-发现错误的时机"}},[t._v("#")]),t._v(" 对比 JS 和 TS 发现错误的时机")]),t._v(" "),s("ul",[s("li",[t._v("使用 JS：\n"),s("ol",[s("li",[t._v("在 VSCode 里面写代码")]),t._v(" "),s("li",[t._v("在浏览器中运行代码 --\x3e 运行时，才会发现错误【晚】")])])]),t._v(" "),s("li",[t._v("使用 TS：\n"),s("ol",[s("li",[t._v("在 VSCode 里面写代码 --\x3e 写代码的同时，就会发现错误【早】")]),t._v(" "),s("li",[t._v("在浏览器中运行代码")])])])]),t._v(" "),s("h2",{attrs:{id:"typescript-相比-js-的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-相比-js-的优势"}},[t._v("#")]),t._v(" TypeScript 相比 JS 的优势")]),t._v(" "),s("h3",{attrs:{id:"内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内容"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),s("ol",[s("li",[t._v("更早（写代码的同时）发现错误，减少找 Bug、改 Bug 时间，提升开发效率")]),t._v(" "),s("li",[t._v("程序中任何位置的代码都有代码提示，随时随地的安全感，增强了开发体验")]),t._v(" "),s("li",[t._v("强大的类型系统提升了代码的可维护性，使得重构代码更加容易")]),t._v(" "),s("li",[t._v("支持最新的 ECMAScript 语法，优先体验最新的语法，让你走在前端技术的最前沿")]),t._v(" "),s("li",[t._v("TS 类型推断机制，不需要在代码中的每个地方都显示标注类型，让你在享受优势的同时，尽量降低了学习负担")]),t._v(" "),s("li",[t._v("除此之外，Vue 3 源码使用 TS 重写、Angular 默认支持 TS、React 与 TS 完美配合，TypeScript 已成为大中型前端 项目的首选编程语言")])]),t._v(" "),s("h3",{attrs:{id:"目前-前端最新的开发技术栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目前-前端最新的开发技术栈"}},[t._v("#")]),t._v(" 目前，前端最新的开发技术栈")]),t._v(" "),s("ol",[s("li",[t._v("React： TS + Hooks")]),t._v(" "),s("li",[t._v("Vue： TS + Vue3")])]),t._v(" "),s("ul",[s("li",[t._v("注意： Vue2 对 TS 的支持不好~")])]),t._v(" "),s("h2",{attrs:{id:"安装ts工具包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装ts工具包"}},[t._v("#")]),t._v(" 安装TS工具包")]),t._v(" "),s("ul",[s("li",[t._v("问题：为什么要安装编译 TS 的工具包?")]),t._v(" "),s("li",[t._v("回答：Node.js/浏览器，只认识 JS 代码，不认识 TS 代码。需要先将 TS 代码转化为 JS 代码，然后才能运行")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v("  i "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-g")]),t._v(" typescript  or  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" global  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("  typescript\n")])])]),s("p",[t._v("注意：Mac 电脑安装全局包时，需要添加 sudo 获取权限：sudo npm i -g typescript yarn 全局安装：sudo yarn global add typescript 验证是否安装成功：tsc –v(查看 typescript 的版本)")]),t._v(" "),s("h2",{attrs:{id:"编译并运行-ts-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译并运行-ts-代码"}},[t._v("#")]),t._v(" 编译并运行 TS 代码")]),t._v(" "),s("h3",{attrs:{id:"内容-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内容-2"}},[t._v("#")]),t._v(" 内容")]),t._v(" "),s("ul",[s("li",[t._v("TS 文件的后缀名为 .ts")]),t._v(" "),s("li",[t._v("流程：1 创建 ts 文件 => 2 编译 TS => 3 执行 JS")]),t._v(" "),s("li",[t._v("说明：所有合法的 JS 代码都是 TS 代码，有 JS 基础只需要学习 TS的类型即可")]),t._v(" "),s("li",[t._v("注意：由 TS 编译生成的 JS 代码中就没有类型信息了")])]),t._v(" "),s("h3",{attrs:{id:"步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[t._v("#")]),t._v(" 步骤")]),t._v(" "),s("ol",[s("li",[t._v("创建 hello.ts 文件")]),t._v(" "),s("li",[t._v("将 TS 编译为 JS：在终端中输入命令，tsc hello.ts（此时，在同级目录中会出现一个同名的 JS 文件）")]),t._v(" "),s("li",[t._v("执行 JS 代码：在终端中输入命令，node hello.js")])]),t._v(" "),s("h3",{attrs:{id:"简化运行ts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简化运行ts"}},[t._v("#")]),t._v(" 简化运行TS")]),t._v(" "),s("ul",[s("li",[t._v("问题：每次修改代码后，都要重复执行两个命令，才能运行 TS 代码，太繁琐")]),t._v(" "),s("li",[t._v("简化方式：使用 ts-node 包，直接在 Node.js 中执行 TS 代码")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-g")]),t._v(" ts-node  or   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" global "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" ts-node\n")])])]),s("p",[t._v("使用方式：ts-node hello.ts 相当于：1 tsc 命令 2 node（注意：ts-node 不会生成 js 文件）")]),t._v(" "),s("h3",{attrs:{id:"ts-node-运行-ts-报错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ts-node-运行-ts-报错"}},[t._v("#")]),t._v(" ts-node 运行 TS 报错")]),t._v(" "),s("p",[t._v("如果发现 ts-node 运行 ts 代码时报错，可以先运行：tsc --init 命令（运行一次即可），然后，再运行 ts-node xxx.ts 即可")]),t._v(" "),s("h3",{attrs:{id:"解决两个ts文件之变量名冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决两个ts文件之变量名冲突"}},[t._v("#")]),t._v(" 解决两个ts文件之变量名冲突")]),t._v(" "),s("ul",[s("li",[t._v("问题：在非模块化环境下，TS 会把 .ts 文件中声明的变量当做全局变量")]),t._v(" "),s("li",[t._v("所以，当两个 .ts 文件中声明的变量名称相同，并且在 VSCode 中同时打开这两个文件时，VSCode 会提示报错虽然，不会影响代码的运行。但看到报错会让人感觉不舒服，所以，只要让 .ts 文件中的代码变为模块化环境即可")]),t._v(" "),s("li",[t._v("操作方式：在 .ts 文件中添加 export {}")]),t._v(" "),s("li",[t._v("解释1：当 TS 看到 export 这样的模块化语法后，就会将该文件当做模块来解析，此时，再声明的变量就是该模块中的局部变量了")]),t._v(" "),s("li",[t._v("解释2：export 不需要导出任何内容，该代码的作用仅仅是为了让 TS 知道这是模块化环境")])])])}),[],!1,null,null,null);s.default=r.exports}}]);